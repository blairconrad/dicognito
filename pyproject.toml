[project]
authors = [
  {name = "Blair Conrad", email = "blair@blairconrad.com"},
]
classifiers=[
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Healthcare Industry",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]
dependencies = [
    "pydicom>=3.0.1",
]
description="A tool for anonymizing DICOM files"
dynamic = ["version"]
keywords = [
  "anonymize", 
  "deidentify",
  "dicom",
]
name = "dicognito"
readme = "README.md"
requires-python = ">=3.10"

[project.scripts]
dicognito = "dicognito.__main__:main"

[project.urls]
Changelog = "https://github.com/blairconrad/dicognito/blob/main/src/dicognito/release_notes.md"
Documentation = "https://github.com/blairconrad/dicognito/blob/main/README.md"
Homepage = "https://github.com/blairconrad/dicognito"
Issues = "https://github.com/blairconrad/dicognito/issues"
Repository = "https://github.com/blairconrad/dicognito"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "mypy",
    "pytest",
    "ruff",
]

[tool.hatch.version]
path = "src/dicognito/release_notes.md"
pattern = "^## (?P<version>.+)$"

[tool.mypy]
show_error_codes=true
show_error_context=true
show_column_numbers=true
pretty=true
color_output=true

warn_unreachable=true
allow_redefinition=false

# treat Optional per PEP 484
strict_optional=true

strict=true

[[tool.mypy.overrides]]
module="pydicom.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="pytest."
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="tests.*"
allow_untyped_defs = true

[tool.pytest.ini_options]
xfail_strict=true

[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = ["ALL"]

ignore = [
  "ANN101",   # choosing not to type-annotate self at this time.
  "COM812",   # may cause conflicts when used with the formatter.
  "COM819",   # may cause conflicts when used with the formatter.
  "D203",     # can either force a blank line before docstring or forbid.
  "D206",     # may cause conflicts when used with the formatter.
  "D212",     # can either force multi-line docstring to start on first or second line.
  "E501",     # may cause conflicts when used with the formatter.
  "ISC001",   # may cause conflicts when used with the formatter.
  "PTH",      # choosing not to swith to pathlib at this time.
  "Q000",     # may cause conflicts when used with the formatter.
  "Q001",     # may cause conflicts when used with the formatter.
  "Q002",     # may cause conflicts when used with the formatter.
  "Q003",     # may cause conflicts when used with the formatter.
  "T201",     # print calls are intentional.
  "W191",     # may cause conflicts when used with the formatter.
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.per-file-ignores]
"assets/**" = [
  "ANN001",   # not public code. No type annotations needed.
  "ANN201",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
  "INP001",   # assets isn't a namespace package.
  "TRY002",   # I don't care that much about custom exceptions.
]

"smoketest/**" = [
  "ANN201",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
  "INP001",   # smoketests isn't a namespace package.
]

"tasks.py" = [
  "ANN001",   # not public code. No type annotations needed.
  "ANN201",   # not public code. No type annotations needed.
  "ANN202",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
]

"tests/**" = [
  "ANN001",   # not public code. No type annotations needed.
  "ANN201",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D101",     # not public code. No docstrings needed.
  "D102",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
  "D104",     # not public code. No docstrings needed.
  "PGH001",   # eval is worth it in tests.
  "S101",     # assert is a key feature of tests.
  "S307",     # eval is worth it in tests.
  "SLF001",   # sometimes we just want to test privates.
]

"tools/**" = [
  "D100",     # tools don't count as public code. No docstrings needed.
  "D103",     # tools don't count as public code. No docstrings needed.
  "INP001",   # tools isn't a namespace package.
  "TRY002",   # I don't care that much about custom exceptions.
]

"tools/release-version.py" = [
  "S603",     # subprocess calls in release-version have been checked
  "S607",     # release-version is assumed to be running on trusted machine
]