[tool.black]
line-length = 120
target_version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.tox
    | \.venv
    | build
    | dist
  )/
)
'''
[tool.mypy]
show_error_codes=true
show_error_context=true
show_column_numbers=true
pretty=true
color_output=true

warn_unreachable=true
allow_redefinition=false

# treat Optional per PEP 484
strict_optional=true

strict=true

[[tool.mypy.overrides]]
module="pydicom.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="pytest."
ignore_missing_imports = true

[[tool.mypy.overrides]]
module="tests.*"
allow_untyped_defs = true

[tool.pytest.ini_options]
xfail_strict=true

[tool.ruff]
target-version = "py38"
line-length = 120
select = ["ALL"]

ignore = [
  "ANN101",   # choosing not to type-annotate self at this time.
  "B007",
  "B904",
  "C400",
  "C417",
  "D100",
  "D101",
  "D102",
  "D103",
  "D107",
  "D202",
  "D203",     # can either force a blank line before docstring or forbid.
  "D205",
  "D212",     # can either force multi-line docstring to start on first or second line.
  "D213",
  "D300",
  "D400",
  "D415",
  "D417",
  "DTZ001",
  "DTZ007",
  "EM101",
  "EM102",
  "PLR0913",
  "PLR0915",
  "PLR1714",
  "PLR2004",
  "PLW0603",
  "PT006",
  "PT012",
  "PT018",
  "PTH100",
  "PTH103",
  "PTH110",
  "PTH112",
  "PTH113",
  "PTH118",
  "PTH120",
  "PTH123",
  "PTH207",
  "RET504",
  "RET505",
  "RET506",
  "RSE102",
  "RUF005",
  "RUF012",
  "RUF015",
  "S101",
  "S324",
  "S603",
  "S607",
  "SIM108",
  "SIM300",
  "T201",     # print calls are intentional.
  "TRY002",
  "TRY003",
  "TRY004",
  "TRY200",
  "UP008",
  "UP010",
  "UP015",
  "UP019",
  "UP027",
  "UP031",
]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[tool.ruff.per-file-ignores]
"assets/**" = [
  "ANN001",   # not public code. No type annotations needed.
  "ANN201",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
  "INP001",   # assets isn't a namespace package.
  "TRY002",   # I don't care that much about custom exceptions.
]

"setup.py" = [
  "D100",     # setup doesn't count as public code. No docstrings needed.
]

"smoketest/**" = [
  "ANN201",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
  "INP001",   # smoketests isn't a namespace package.
]

"tasks.py" = [
  "ANN001",   # not public code. No type annotations needed.
  "ANN201",   # not public code. No type annotations needed.
  "ANN202",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
]

"tests/**" = [
  "ANN001",   # not public code. No type annotations needed.
  "ANN201",   # not public code. No type annotations needed.
  "D100",     # not public code. No docstrings needed.
  "D101",     # not public code. No docstrings needed.
  "D102",     # not public code. No docstrings needed.
  "D103",     # not public code. No docstrings needed.
  "D104",     # not public code. No docstrings needed.
  "PGH001",   # eval is worth it in tests.
  "S101",     # assert is a key feature of tests.
  "S307",     # eval is worth it in tests.
  "SLF001",   # sometimes we just want to test privates.
]

"tools/**" = [
  "D100",     # tools don't count as public code. No docstrings needed.
  "D103",     # tools don't count as public code. No docstrings needed.
  "INP001",   # tools isn't a namespace package.
  "TRY002",   # I don't care that much about custom exceptions.
]